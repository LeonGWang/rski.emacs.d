* Some information about me
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Romanos Skiadas"
      user-mail-address "rom.skiad@gmail.com")
#+END_SRC
* Bootstart use-package
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
  ;; async refresh for newer emacsen
  (if (version<= emacs-version "24")
      (package-refresh-contents)
    (package-refresh-contents t))
#+END_SRC
* Almost an IDE
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (add-hook 'after-init-hook #'global-flycheck-mode)
    (add-hook 'after-init-hook #'flycheck-pos-tip-mode)
    (add-hook 'flyspell-mode-hook #'flycheck-color-mode-line-mode)
    :after evil-leader
    :diminish flycheck-mode
    :config
    (evil-leader/set-key
      "fp" 'flycheck-previous-error
      "fn" 'flycheck-next-error)
    (use-package flycheck-color-mode-line
      :config (setq flycheck-color-mode-line-show-running nil))
    (use-package flycheck-pos-tip))
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :defer t
    :init
    (add-hook 'text-mode-hook #'flyspell-mode)
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)
    :diminish 'flyspell-mode)
#+END_SRC
** Company to autocomplete
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-minimum-prefix-length 3
            company-idle-delay 0
            company-require-match nil
            company-auto-complete nil
            company-selection-wrap-around t
            company-dabbrev-downcase nil)
      :config (company-tng-configure-default)
      (use-package company-statistics
        :config (company-statistics-mode)))

  #+END_SRC
** Refactoring
    #+BEGIN_SRC emacs-lisp
      (use-package emr
        :commands (emr-initialize)
        :init (add-hook 'c-mode-common-hook (lambda ()
                                              (emr-initialize)
                                              (bind-key "C-c C-a" 'emr-c-insert-include c-mode-base-map))))
    #+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :defer t
    :config (setq helm-ff-skip-boring-files t
                  helm-buffer-max-length 50)
    :init (helm-mode 1)
    :diminish helm-mode
    :bind (([remap execute-extended-command] . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ([remap find-file] . helm-find-files)
           ("M-o" . 'helm-semantic-or-imenu)
           ([remap switch-to-buffer] . helm-mini)))
  (use-package helm-tramp :defer t)
#+END_SRC

* Languages
  Packages for getting better support for various languages
** Python
   Python config for company using anaconda.
   #+BEGIN_SRC emacs-lisp
     (use-package anaconda-mode
       :defer t
       :init
       (add-hook 'python-mode-hook 'anaconda-mode)
       (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
     (use-package company-anaconda
       :after company
       :defer t
       :init (add-hook 'python-mode-hook
                       (lambda ()
                         (add-to-list (make-local-variable 'company-backends)
                                      'company-anaconda))))
   #+END_SRC
** Puppet
   Use puppet-mode from Vox Pupuli
   #+BEGIN_SRC emacs-lisp
   (use-package puppet-mode :defer t)
   #+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config (setq markdown-command "multimarkdown"))
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
  ;; (use-package ensime
    ;; :ensure nil
    ;; :pin melpa-stable)
#+END_SRC
** Lua because I use Awesome
*** A lua mode for the basics
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode :defer t)
#+END_SRC
*** Autocomplete too, although it seems to not work with the awesome libs
#+BEGIN_SRC emacs-lisp
  (use-package company-lua
    :defer t
    :after 'company
    :init (add-hook 'lua-mode-hook
                    (lambda ()
                      (add-to-list (make-local-variable 'company-backends)
                                   'company-lua))))
#+END_SRC

** Web dev
*** web mode is really good
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django" . "\\.html\\'")))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-css-colorization t))
#+END_SRC
*** emmet to expand html
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :defer t
        :init (add-hook 'web-mode-hook 'emmet-mode)
              (add-hook 'html-mode-hook 'emmet-mode))
    #+END_SRC

** Dockerfile mode for docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode :defer t)
#+end_src
** C/C++
*** Autocomplete std headers
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :defer t
    :init (add-hook 'c-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           'company-c-headers))))
#+END_SRC

** YANG
#+BEGIN_SRC emacs-lisp
  (use-package yang-mode :defer t
    :bind (:map yang-mode-map
                ("C-c u" . sp-backward-up-sexp)) ;; Take me to your parent. sp is *brilliant*
    :init (add-hook 'yang-mode-hook (lambda ()
                                      (setq imenu-generic-expression
                                            '(("leaf" "leaf \\(.*\\) {" 1)
                                              ("container" "container \\(.*\\) {" 1)
                                              ("list" "list \\(.*\\) {" 1)
                                              ("grouping" "grouping \\(.*\\) {" 1)
                                              ("import" "import \\(.*\\) {" 1)
                                              )))))
#+END_SRC
** Nixos
*** Nix-mode for file editing
   #+BEGIN_SRC emacs-lisp
     (use-package nix-mode :defer t)
   #+END_SRC
*** Nix-company has great autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package company-nixos-options
       :after  company
       :defer t
       :init (add-hook 'nixos-mode-hook
                       (lambda ()
                         (add-to-list (make-local-variable 'company-backends)
                                      'company-nixos-options))))
   #+END_SRC
** Golang
*** Warn if gopath is unset
    #+BEGIN_SRC emacs-lisp
      (unless (getenv "GOPATH")
        (user-error "GOPATH unset"))
    #+END_SRC
*** Base go-mode
    Jump to def using [[https://github.com/rogpeppe/godef][godef]]
    Automatically add/remove missing imports with [[golang.org/x/tools/cmd/goimports][goimports]]
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :defer t
       :init (add-hook 'before-save-hook 'gofmt-before-save)
       :config (setq gofmt-command "goimports"
                     gofmt-show-errors nil) ;; what do i have flycheck for?
       (evil-define-key 'normal go-mode-map (kbd "gd") 'godef-jump)
       (evil-define-key 'normal go-mode-map (kbd "god") 'godef-jump-other-window)
       (evil-define-key 'normal go-mode-map (kbd "K") 'godoc-at-point)
       (evil-define-key 'visual go-mode-map (kbd "gd") 'godef-jump)
       (evil-define-key 'visual go-mode-map (kbd "god") 'godef-jump-other-window)
       (evil-define-key 'visual go-mode-map (kbd "K") 'godoc-at-point)
       (evil-define-key 'normal godoc-mode-map (kbd "q") 'quit-window)
       ;; workaround not matching multiline signatures
       ;;  https://github.com/dominikh/go-mode.el/issues/57
       (defun rski/go-mode-setup ()
         (setq-local imenu-generic-expression
                     '(("type" "^type *\\([^ \t\n\r\f]*(\\)" 1)
                       ("func" "^func \\(.*\\)(" 1)))
         (setq-local whitespace-line-column 100)
         (whitespace-mode t)
         (setq fill-column 100)
         (auto-fill-mode t))
       (add-hook 'go-mode-hook #'rski/go-mode-setup)

       (use-package go-eldoc :init (add-hook 'go-mode-hook 'go-eldoc-setup))
       (use-package go-guru :init (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode))
       (use-package go-playground :defer t)

       ;;; requires nfs/gocode
       (use-package company-go
         :after company
         :init (add-hook 'go-mode-hook
                         (lambda ()
                           (add-to-list (make-local-variable 'company-backends)
                                        'company-go)))
                                           ;;; this is broken with company-tng
         (setq company-go-insert-arguments nil))

      ;;; requires the gometalinter binary
       (use-package flycheck-gometalinter
         :init (add-hook 'go-mode-hook (lambda () (flycheck-select-checker 'gometalinter)))
         :config
         (setq flycheck-gometalinter-fast t)
         (setq flycheck-gometalinter-disable-linters '("gocyclo" "goconst" "vetshadow"))
         (flycheck-gometalinter-setup))

       (use-package gotest
         :config
         (add-hook 'go-test-mode-hook 'visual-line-mode)
         (defun rski/glog-arg-callback(suite test)
           " -args -v=9 " )
         (defun rski/go-current-test-glog-verbose ()
           "Run go test with maximum glog verbosity"
           (interactive)
           ;; let doesn't work but this does so
           (setq go-test-additional-arguments-function #'rski/glog-arg-callback)
           (go-test-current-test)
           (setq go-test-additional-arguments-function nil))
         (evil-leader/set-key-for-mode 'go-mode
           "tf" 'go-test-current-file
           "tt" 'go-test-current-test
           "tv" 'rski/go-current-test-glog-verbose)
         (setq go-test-verbose t)) ;; passes -v to go-test so the test names show when running them

       (use-package go-rename
         :init
         (evil-leader/set-key-for-mode 'go-mode
           "rr" 'go-rename)))
   #+END_SRC
** Protocol buffers
   #+BEGIN_SRC emacs-lisp
     (use-package protobuf-mode :defer t)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :defer t
       :config
       (use-package flycheck-rust
         :init (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
       (use-package racer
         :init
         (add-hook 'rust-mode-hook 'racer-mode)
         (add-hook 'racer-mode-hook 'eldoc-mode)))
   #+END_SRC
* Git configuration
** Magit
   The best thing since sliced bread and normal bread.
   vc is the built-in version control system and it is disabled because I don't use it really.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :init (setq magit-bury-buffer-function 'magit-mode-quit-window)
    :bind ("C-c g" . magit-status)
    :config
    (defun rski/magit-push-review()
      (magit-run-git-async "push" "review"))
    (magit-define-popup-action 'magit-push-popup ?g "Push to gerrit" 'rski/magit-push-review)
    (use-package evil-magit
      :config (evil-magit-init)))
  (setq vc-handled-backends nil)
#+END_SRC
** Configure git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
     :defer t
     :config (setq git-gutter:update-interval 0.1)
     :init (global-git-gutter-mode t)
     :diminish git-gutter-mode)
#+END_SRC
* Navigation
** Swiper for more fine-grained search in a buffer
*** The swiper package that uses helm
#+BEGIN_SRC emacs-lisp
  (use-package swiper-helm
    :defer t
    :bind (("M-i" . swiper-helm)))
#+END_SRC
** Projectile
*** Base projectile package
   Enable projectile globally, then C-c p is the prefix for projectile.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init (projectile-mode)
    (add-to-list 'projectile-globally-ignored-directories "Godeps")
    :config (setq projectile-mode-line
                  '(:eval (format " Projectile[%s]"
                                  (projectile-project-name)))))
#+END_SRC
*** Helm projectile for some projectile niceness with helm
  #+BEGIN_SRC emacs-lisp
  ;Helm-ag is required for helm-projectile-ag below
  (use-package helm-ag :defer t)
  (use-package helm-projectile
    :defer nil
    :config (helm-projectile-on)
    :commands (helm-projectile-switch-project helm-projectile-switch-to-buffer)
    :bind ("M-I" . helm-projectile-ag))
  (defun rski/c-p-dwim()
    "If inside a project, do find-file, otherwise switch to a project."
    (interactive)
    (if (ignore-errors (projectile-project-root))
        (helm-projectile-switch-to-buffer)
      (helm-projectile-switch-project)))
  #+END_SRC
** treemacs
   Treemacs has a built-in persistent tag view. which i want to have.
   It also looks amazing, much better than neotree.
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs :defer t)
   (use-package treemacs-projectile
     :defer t
     :after treemacs
     :after projectile)
   #+END_SRC
* Niceties
** Helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :defer t
       :config (evil-define-key 'normal helpful-mode-map
                 "q" 'quit-window)
       :bind (([remap describe-function] . helpful-callable)
              ([remap describe-variable] . helpful-variable)
              ([remap describe-key] . helpful-key)))
   #+END_SRC
** Which key to show possible candidates for keystrokes after a prefix like C-c
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode)
  #+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :defer t
  :init
  (add-hook 'text-mode-hook #'ws-butler-mode)
  (add-hook 'prog-mode-hook #'ws-butler-mode)
  :diminish ws-butler-mode)

  (add-hook 'text-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (setq whitespace-style '(face lines-tail))
#+END_SRC

** Highlight todos
   #+BEGIN_SRC emacs-lisp
   (use-package hl-todo
     :init (global-hl-todo-mode))
   #+END_SRC
** anzu to show num of matched searches in the buffer
   #+BEGIN_SRC emacs-lisp
   (use-package anzu
     :diminish anzu-mode
     :init (add-hook 'after-init-hook 'global-anzu-mode))
   #+END_SRC
* Theming
   #+BEGIN_SRC emacs-lisp
     ;;; fonts
     (set-face-attribute 'default nil :family "Source Code Pro" :height 105)
     (use-package monokai-theme :defer t)
     (use-package atom-one-dark-theme :defer t)
     (use-package solarized-theme :init (load-theme 'solarized-dark 'no-confirm))
     ;;; left fringe arrow face (breakpoint triangle)
     (defface right-triangle-face
       '((t :foreground "red"))
       "Face for the right-triangle bitmap.")
     (set-fringe-bitmap-face 'right-triangle 'right-triangle-face)
#+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters :defer t
       :init (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
** Mode line
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
* Org mode
** Install org from the repos
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer nil ;; can't defer because my config is literate
    :init
    (setq org-todo-keywords
          '((sequence "TODO" "|" "DONE" "ABANDONED")))
    (setq org-hide-leading-stars t)
    :bind (("\C-col" . org-store-link)
           ("\C-coa" . org-agenda)
           ("\C-coc" . org-capture)
           ("\C-cob" . org-switchb))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (octave . t)))
    (setq org-directory (expand-file-name "~/org"))
    (setq org-agenda-files
          '("~/org/todo.org" "~/org/arista.org" "~/org/buy.org" "~/org/daily.org" "~/org/learning.org"))
    (setq org-default-notes-file (concat org-directory "/agenda.org"))
    (setq org-src-fontify-natively t))
#+END_SRC
** Presentations
*** Org (for some reason called ox-reveal too, kinda confusing) reveal for exporting to reveal.js
    #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal
        :defer t
        :config (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
        :init (add-hook 'org-mode 'reveal-mode))
    #+END_SRC
*** htmlize for syntax highlighting in org presentations
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize :defer t)
    #+END_SRC
** Plot with gnuplot
   org-plot/gnuplot requires the gnuplot lib
   #+BEGIN_SRC emacs-lisp
     (use-package gnuplot :defer t)
   #+END_SRC
* Editing
** Evil
   #+BEGIN_SRC emacs-lisp
     (defun rski/indent-buffer()
       "what the fn name says"
       (interactive)
       (indent-region (point-min) (point-max)))

     (use-package evil-leader
       :init (global-evil-leader-mode)
       :config
       (evil-leader/set-key
         "ee" 'eval-last-sexp
         "xb" 'helm-mini
         "xkk" 'kill-current-buffer
         "oo" 'other-window
         "of" 'other-frame
         "ww" 'evil-window-next
         "ws" 'evil-window-split
         "ib" 'rski/indent-buffer
         "," 'execute-extended-command)
       (evil-leader/set-leader ",")
       (define-key evil-normal-state-map (kbd "C-p") 'rski/c-p-dwim)

       (use-package evil
         :init (setq evil-want-C-u-scroll t)
         :after evil-leader
         :bind (:map evil-motion-state-map
                     (":" . evil-repeat-find-char)
                     (";" . evil-ex))
         :config (evil-mode)
         (define-key evil-normal-state-map (kbd "M-.") nil)
         (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
         (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)

         (use-package evil-escape
           :diminish evil-escape-mode
           :config (evil-escape-mode))

         (use-package evil-surround :config(global-evil-surround-mode))
         (use-package evil-collection :config (evil-collection-init))))
   #+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode)
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :defer t
    :init
    (add-hook 'prog-mode-hook #'smartparens-mode)
    (add-hook 'text-mode-hook #'smartparens-mode)
    :config
    (evil-leader/set-key
      "sl" 'sp-forward-slurp-sexp
      "sh" 'sp-backward-slurp-sexp
      "su" 'sp-unwrap-sexp
      "sw" 'sp-rewrap-sexp)
    (require 'smartparens-config)
    :diminish smartparens-mode)
#+END_SRC
** Comments
   Rebind M-; to comment out lines instead of insert comments in the end
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-;") 'comment-line)
   #+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
    (defun rski/visit-config ()
      (interactive)
      (find-file (substitute-in-file-name "$HOME/.emacs.d/config.org")))
    (global-set-key (kbd "C-c v") 'rski/visit-config)
    (defun rski/load-config ()
      (interactive)
      (let ((config-file (substitute-in-file-name "$HOME/.emacs.d/config.org")))
        (org-babel-load-file config-file)))

    ;;; modeline
    (setq-default mode-line-format '("" mode-line-modified
          mode-line-remote " " mode-line-buffer-identification " "
          mode-line-position mode-line-modes mode-line-misc-info))
    (display-time-mode t)
    (display-battery-mode t)
    (setq battery-mode-line-format "[%L %b%p%% %t]")

    ;;; Don't ask to keep current tags table when changing dirs
    (setq tags-add-tables nil)

    (use-package eldoc :diminish eldoc-mode)

    ;;; line numbers
    (setq display-line-numbers-grow-only t) ;; confusing otherwise
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (add-hook 'text-mode-hook #'display-line-numbers-mode)

    ;;; shut up
    (setq ring-bell-function 'ignore)

    ;;; scroll one line at a time
    (setq scroll-conservatively 1000)

    (setq sentence-end-double-space nil) ;; when filling, use one space after fullstop
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq column-number-mode 1)
    (setq backup-directory-alist
          `((".*" . "~/.tmp/emacs")))
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.tmp/emacs" t)))
    (setq visible-bell nil)
    (setq inhibit-startup-screen t)
    (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
    (add-hook 'prog-mode-hook (lambda () (setq tab-width 4))) ; 8 is the default and that is waaaay to much
    (setq create-lockfiles nil);; might be a bad idea but for 99% of the time should be ok

    ;; mostly for fixing the backup etc files being saved next to the files
    (use-package better-defaults :init (setq uniquify-min-dir-content 1))
   #+END_SRC
* Applications
** Eshell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'eshell-mode-hook
               (lambda ()
                 (setq show-trailing-whitespace nil)))
   #+END_SRC
** IRC
   Make ERC spellcheck messages before I send them
   #+BEGIN_SRC emacs-lisp
     (add-hook 'erc-mode-hook 'erc-spelling-mode)
     (setq erc-autojoin-mode t)
     (setq erc-pcomplete-nick-postfix ", ")
   #+END_SRC
** Feeds with elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :defer t
       :config (setq elfeed-feeds
                     '(("http://planet.emacsen.org/atom.xml" emacs)
                       ("http://steve-yegge.blogspot.com/atom.xml" blog emacs)
                       ("http://nullprogram.com/feed/" blog emacs)
                       ("https://jvns.ca/atom.xml" blog))))

   #+END_SRC
** eww
   #+BEGIN_SRC emacs-lisp
     (defun rski/rfc (rfc)
       (interactive "nView RFC>")
       (eww (format "https://tools.ietf.org/html/rfc%s" rfc )))

   #+END_SRC
* Hacks
** Brewery
  Load the work in progress stuff that the world is not ready for.
  There is horrible stuff brewing in there. Also work stuff that I do not want to publish.
#+BEGIN_SRC emacs-lisp
 (use-package brewery
   :defer t
   :commands dlv-debug-current-test ;; Whenever I open a go file, this function gets evaluated, pulling the rest of the file along with other commands that should be autoloaded but aren't, so they become available by chance. Eh.
   :ensure nil
   :load-path "~/Code/emacs-brewery/")
#+END_SRC

** Remacs
   List some unported remacs functions
  #+BEGIN_SRC emacs-lisp
    (defun list-unported-remacs-funcs (remacs-dir)
      (unless (file-directory-p remacs-dir)
        (user-error "dir \"%s\" not found" remacs-dir))
      (let* ((default-directory (concat (file-name-as-directory remacs-dir) "src"))
             (defuns (shell-command-to-string "grep -rnIH \"^DEFUN\""))
             (defun-list (split-string defuns "\n" t)))
        (let ((buff (get-buffer-create "*unported functions*"))
              prev-file)
          (switch-to-buffer-other-window buff)
          (delete-region (point-min) (point-max))
          (org-mode)
          (dolist (line defun-list)
            (let ((current-file (car (split-string line ":" t))))
              (unless (string-equal prev-file current-file)
                (setq prev-file current-file)
                (insert "* " prev-file "\n"))
              (insert "  - " (cadr (split-string line "\"")) "\n")
              )))))

    (defun rski/list-unported-emacs-funcs ()
      (interactive)
      (list-unported-remacs-funcs "~/Code/rust/remacs"))
  #+END_SRC
