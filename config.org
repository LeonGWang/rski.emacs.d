* Some assistance functions
** Global hook
   Use dolist to simulate adding a "global-hook"
#+BEGIN_SRC emacs-lisp
(defun add-global-hook (func)
  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
  (add-hook hook func))
)
#+END_SRC
* Some information about me
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Romanos Skiadas"
      user-mail-address "rom.skiad@gmail.com")
#+END_SRC
* Bootstart use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
  (package-refresh-contents t)
#+END_SRC
** M-x try RET package installs a package in /tmp
   Good for trying out packages without tying to them
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

* Autocorrection
** Flycheck with hovering pos-tip
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (setq flycheck-global-modes (not 'emacs-lisp-mode))
          (add-hook 'after-init-hook #'global-flycheck-mode)
    :diminish flycheck-mode)

  ;; (use-package flycheck-pos-tip
  ;;   :ensure t
  ;;   :init (with-eval-after-load 'flycheck
  ;;           (flycheck-pos-tip-mode)))
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (diminish 'flyspell-mode)
#+END_SRC
* Helm
   Set the helm command prefix to C-c h because C-x c is scary close to C-x C-c
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :defer t
    :config (setq helm-ff-skip-boring-files t)
    :init
    (progn (require 'helm-config)
           (helm-mode 1))
    :diminish helm-mode
    :bind (("C-c h" . helm-command-prefix)
           ("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x C-f" . helm-find-files)
           ([remap switch-to-buffer] . helm-mini)))
#+END_SRC
** helm-tramp
   Use the ssh/config file in tramp
#+BEGIN_SRC emacs-lisp
  (use-package helm-tramp
    :defer t)
#+END_SRC

* Autocompletion and snippets
** Company
*** Configure the base company package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
                ("<tab>" . company-select-next))
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-minimum-prefix-length 1
          company-idle-delay 0
          company-require-match nil
          company-auto-complete nil
          company-selection-wrap-around t
          company-dabbrev-downcase nil)
    :config (company-tng-configure-default))
#+END_SRC

** Configure yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1)
  :diminish yas-minor-mode
  :bind (("C-c y" . yas-insert-snippet)))
#+END_SRC

* Languages
  Packages for getting better support for various languages
** Python
   Python config for company using anaconda.
   #+BEGIN_SRC emacs-lisp
     (use-package anaconda-mode
       :ensure t
       :init
       (add-hook 'python-mode-hook 'anaconda-mode)
       (add-hook 'python-mode-hook 'anaconda-eldoc-mode))

     (use-package company-anaconda
       :after company
       :init (add-hook 'python-mode-hook
                       (lambda ()
                         (add-to-list (make-local-variable 'company-backends)
                                      '(company-anaconda :with company-capf)))))
   #+END_SRC
** Puppet
   Use puppet-mode from Vox Pupuli
   #+BEGIN_SRC emacs-lisp
   (use-package puppet-mode :ensure t)
   #+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    ;; TODO set markdown-command properly
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
(use-package ensime
  :ensure t
  :pin melpa-stable)
#+END_SRC
** Lua because I use Awesome
*** A lua mode for the basics
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
*** Autocomplete too, although it seems to not work with the awesome libs
#+BEGIN_SRC emacs-lisp
  (use-package company-lua
    :ensure t
    :defer t
    :after 'company
    :init (add-hook 'lua-mode-hook
                    (lambda ()
                      (add-to-list (make-local-variable 'company-backends)
                                   'company-lua))))
#+END_SRC

** Web dev
*** web mode is really good
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django" . "\\.html\\'")))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-css-colorization t))
#+END_SRC
*** emmet to expand html
    #+BEGIN_SRC emacs-lisp
                (use-package emmet-mode
                  :init (add-hook 'web-mode-hook 'emmet-mode)
                        (add-hook 'html-mode-hook 'emmet-mode))
    #+END_SRC

** Dockerfile mode for docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t)
#+end_src
** c/c++
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :config (add-hook 'c-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           'company-c-headers))))
#+END_SRC
** Yang
#+BEGIN_SRC emacs-lisp
   (use-package yang-mode :defer t)
   ; FIXME
   (use-package flycheck-yang :defer t)
#+END_SRC
** Nixos
*** Nix-mode for file editing
   #+BEGIN_SRC emacs-lisp
     (use-package nix-mode :defer t)
   #+END_SRC
*** Nix-company has great autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package company-nixos-options
       :after  company
       :init (add-hook 'nixos-mode-hook
                       (lambda ()
                         (add-to-list (make-local-variable 'company-backends)
                                      'company-nixos-options))))
   #+END_SRC
** Golang
*** Base go-mode
    Jump to def using [[https://github.com/rogpeppe/godef][godef]]
    Automatically add/remove missing imports with [[golang.org/x/tools/cmd/goimports][gomiports]]
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :config (setq gofmt-command "goimports")
       :init (add-hook 'before-save-hook 'gofmt-before-save)
       (add-hook 'go-mode-hook (lambda ()
                                 (local-set-key (kbd "M-.") 'godef-jump)
                                 (local-set-key (kbd "M-4 M-.") 'godef-jump-other-window)
                                 (local-set-key (kbd "C-c C-d") 'godoc-at-point))))
   #+END_SRC
*** Autocompletion, requires [[https://github.com/nsf/gocode%20][gocode]] and gopath to be set to include it
   #+BEGIN_SRC emacs-lisp
     (use-package company-go
       :after company
       :init (add-hook 'go-mode-hook
                       (lambda ()
                         (add-to-list (make-local-variable 'company-backends)
                                      'company-go))))
   #+END_SRC
*** Eldoc, also requires gocode
   #+BEGIN_SRC emacs-lisp
     (use-package go-eldoc
       :init (add-hook 'go-mode-hook 'go-eldoc-setup))
   #+END_SRC
*** Guru
    #+BEGIN_SRC emacs-lisp
      (use-package go-guru
        :init (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode))
    #+END_SRC
*** playground inside emacs
    #+BEGIN_SRC emacs-lisp
    (use-package go-playground)
    #+END_SRC
*** go test to run tests
    #+BEGIN_SRC emacs-lisp
      (use-package gotest
        :config (add-hook 'go-test-mode-hook 'visual-line-mode)
        :bind (:map go-mode-map
               ("C-c t" . go-test-current-file)))
    #+END_SRC
*** go rename for refactoring
    #+BEGIN_SRC emacs-lisp
      (use-package go-rename
         :bind (:map go-mode-map
                     ("C-c r" . go-rename)))
    #+END_SRC
** Protocol buffers
   #+BEGIN_SRC emacs-lisp
     (use-package protobuf-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
   (use-package rust-mode)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-rust
       :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
   (use-package racer
     :config
   (add-hook 'rust-mode-hook 'racer-mode)
   (add-hook 'racer-mode-hook 'eldoc-mode))
   #+END_SRC
* Git configuration
** Magit
   The best thing since sliced bread and normal bread.
   vc is the built-in version control system and it is disabled because I don't use it really.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    (("C-c g" . magit-status)
     ("C-c l c" . magit-log-current)
     ("C-c l l" . magit-log-branches))
    :ensure t)
  (setq vc-handled-backends nil)
#+END_SRC
** Configure git-gutter, make it work with linum
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
     :ensure t
     :config
     (setq git-gutter:update-interval 0.1)
     :init
     (global-git-gutter-mode t)
     :diminish git-gutter-mode)
#+END_SRC

* Navigation
** Swiper for more fine-grained search in a buffer
*** The swiper package that uses helm
#+BEGIN_SRC emacs-lisp
  (use-package swiper-helm
    :ensure t
    :defer t
    :bind (("M-i" . swiper-helm)))
#+END_SRC
** Hydra: bindings that stick around
   Tired of pressing C-c ! n C-c ! n C-c ! p again and again to go through the errors?
   Hydra can make this C-c ! n n n n p n etc!
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC
** Subword mode: move inside camelcase
   e.g  |SomeWord (M-f) \to Some|Word
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Bind imenu to something again
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-c") 'helm-semantic-or-imenu)
   #+END_SRC
** Imenu-anywhere gives imenu across a number of buffers
   #+BEGIN_SRC emacs-lisp
     (use-package imenu-anywhere
       :bind (("C-c i" . helm-imenu-anywhere)))
   #+END_SRC
** Avy
   Jump to places in the buffer
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :bind (("C-o" . avy-goto-char-2)))
   #+END_SRC
** Projectile
*** Base projectile package
   Enable projectile globally, then C-c p is the prefix for projectile.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-global-mode)
          (add-to-list 'projectile-globally-ignored-directories "Godeps")
          (projectile-cleanup-known-projects))
#+END_SRC
*** Helm projectile for easily switching projects and files in the project
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :config (helm-projectile-on))
#+END_SRC
*** Helm-ag is required for helm-projectile-ag below
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t
    :defer t)
#+END_SRC
*** Helm projectile for some projectile niceness with helm
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :bind ("M-I" . helm-projectile-ag))
#+END_SRC
** scrolling
   one line at a time
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 1000)
   #+END_SRC
** treemacs
   Treemacs has a built-in persistent tag view. which i want to have.
   It also looks amazing, much better than neotree.
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs :defer t)
   (use-package treemacs-projectile
     :defer t
     :after treemacs
     :bind (("C-c v" . treemacs-projectile-toggle))
     :after projectile)
   #+END_SRC
* Niceties
** Line numbers
   This only works with emacs26 but idc
   #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers-grow-only t)
     (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode)))
     (add-hook 'text-mode-hook (lambda () (display-line-numbers-mode)))
   #+END_SRC
** Oh god shut up
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** Which key to show possible candidates for keystrokes after a prefix like C-c

#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:defer t
:init (which-key-mode)
:diminish which-key-mode)
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :init
  (add-global-hook 'ws-butler-mode)
  :diminish ws-butler-mode)

(setq-default show-trailing-whitespace t)
#+END_SRC

** Better defaults.
    Remove toolbars, scroll bars, etc, remember pointer when closing file, mouse yank insert at point,
    sets require-final-newline, indent-tabs set to nil, other useful stuff

#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :ensure t)
#+END_SRC

** Other little nice settings

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil) ;; when filling, use one space after fullstop
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq column-number-mode 1)
  (setq backup-directory-alist
        `((".*" . "~/.tmp/emacs")))
  (setq auto-save-file-name-transforms
        `((".*" ,"~/.tmp/emacs" t)))
  (setq visible-bell nil)
  (setq inhibit-startup-screen t)
  (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
  (add-hook 'prog-mode-hook (lambda () (setq tab-width 2))) ; 8 is the default and that is waaaay to much
  (setq create-lockfiles nil);; might be a bad idea but for 99% of the time should be ok
#+END_SRC

** recompile with C-c C-c
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (local-set-key (kbd "C-c C-c") 'recompile)))
    #+END_SRC
** Folds
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-z") 'set-selective-display)
   #+END_SRC
** Highlight todos
   #+BEGIN_SRC emacs-lisp
   (use-package hl-todo
     :init (global-hl-todo-mode))
   #+END_SRC
* Theming
** monokai does nice highlighting of src blocks in org
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :defer t)
    ;; :init (load-theme 'monokai 'no-confirm))
#+END_SRC
** atom one dark is also a good theme
   #+BEGIN_SRC emacs-lisp
   (use-package atom-one-dark-theme
     :ensure t
     :defer t
     :init (load-theme 'atom-one-dark 'no-confirm))
   #+END_SRC
** left fringe arrow
   Set the face for the breakpoint triangle (and whatever else uses this bitmap)
   #+BEGIN_SRC emacs-lisp
     (defface right-triangle-face
       '((t :foreground "red"))
       "Face for the right-triangle bitmap.")
     (set-fringe-bitmap-face 'right-triangle 'right-triangle-face)
   #+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro" :height 105)
#+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters :defer t
       :init (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
* Org mode
** Install org from the repos
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init (setq org-todo-keywords
                '((sequence "TODO" "|" "DONE" "ABANDONED")))
          (setq org-hide-leading-stars t)
    :bind (("\C-col" . org-store-link)
           ("\C-coa" . org-agenda)
           ("\C-coc" . org-capture)
           ("\C-cob" . org-switchb))
    :config (setq org-directory (expand-file-name "~/org")))
#+END_SRC

** Presentations
*** Org (for some reason called ox-reveal too, kinda confusing) reveal for exporting to reveal.js

#+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t
      :config (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      :init (add-hook 'org-mode 'reveal-mode))
#+END_SRC

*** htmlize for syntax highlighting in org presentations

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

** Make literate programming better

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Org capture: saving notes
*** Set the default file where agenda captures are placed
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/agenda.org"))
#+END_SRC

** Autocomplete org keywords
   Snippet courtesy of purple_arrows: http://emacs.stackexchange.com/questions/21171/company-mode-completion-for-org-keywords
#+BEGIN_SRC emacs-lisp
  (defun org-keyword-backend (command &optional arg &rest ignored)
    (interactive (list 'interactive))
    (cl-case command
      (interactive (company-begin-backend 'org-keyword-backend))
      (prefix (and (eq major-mode 'org-mode)
                   (cons (company-grab-line "^#\\+\\(\\w*\\)" 1)
                         t)))
      (candidates (mapcar #'upcase
                          (cl-remove-if-not
                           (lambda (c) (string-prefix-p arg c))
                           (pcomplete-completions))))
      (ignore-case t)
      (duplicates t)))
  (add-hook 'org-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           'org-keyword-backend)
                           (setq-local company-minimum-prefix-length 3)))
#+END_SRC

** Agenda
   #+BEGIN_SRC emacs-lisp
     (load-library "find-lisp")
     (defun rski/set-org-agenda-files()
       (interactive)
       (setq org-agenda-files (find-lisp-find-files "~/org" "\.org$")))
     (rski/set-org-agenda-files)
   #+END_SRC
** Plot with gnuplot
   org-plot/gnuplot requires the gnuplot lib
   #+BEGIN_SRC emacs-lisp
     (use-package gnuplot)
   #+END_SRC
* Terminal
** Eshell
   Because I keep forgetting
   #+BEGIN_SRC emacs-lisp
     (defalias 'vim 'find-file)
     (defalias 'emacs 'find-file)
     (add-hook 'eshell-mode-hook
               (lambda ()
                 (setq show-trailing-whitespace nil)))
   #+END_SRC
* Editing
** Evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config (evil-mode)
       :after (evil-magit evil-leader))

     (use-package evil-magit
       :config (evil-magit-init))

     (use-package evil-leader
       :defer t
       :init (global-evil-leader-mode)
       :config (evil-leader/set-key "ee" 'eval-last-sexp)
               (evil-leader/set-leader ","))

     (use-package evil-escape
       :config (evil-escape-mode))

     ;; (use-package org-evil)
     ;; (use-package evil-smartparens)
     ;; (use-package evil-nerd-commenter)
     ;; (use-package evil-surround)
   #+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config (global-undo-tree-mode 1)
    :ensure t
    :bind (("C-/" . undo)
           ("C-c C-/" . undo-tree-redo)))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init (add-global-hook 'smartparens-mode)
    :config (defhydra rski-smartparens-hydra ()
            "Edit parens"
            ("l" sp-forward-slurp-sexp "s-back")
            ("h" sp-backward-slurp-sexp "s-fwd")
            ("u" sp-unwrap-sexp "unwrap")
            ("w" sp-rewrap-sexp "rewrap"))
            (require 'smartparens-config)
    :bind (("C-c s" . rski-smartparens-hydra/body))
    :diminish smartparens-mode)
#+END_SRC
** Comments
   Rebind M-; to comment out lines instead of insert comments in the end
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-;") 'comment-line)
   #+END_SRC
* Make visiting and reloading the config easy
** Visit the config file
#+BEGIN_SRC emacs-lisp
  (defun rski/visit-config ()
    (interactive)
    (find-file (substitute-in-file-name "$HOME/.emacs.d/config.org")))
#+END_SRC
** Load the config with babel
#+BEGIN_SRC emacs-lisp
  (defun rski/load-config ()
    (interactive)
    (setq config-file (substitute-in-file-name "$HOME/.emacs.d/config.org"))
    (org-babel-load-file config-file))
#+END_SRC
* Modeline stuff
** Display battery and time
   #+BEGIN_SRC emacs-lisp
   (display-time-mode t)
   (display-battery-mode t)
   (setq battery-mode-line-format "[%L %b%p%% %t]")
   #+END_SRC
* Applications
** Ledger
*** The base backage
   TODO
   (defvar ledger-environment-alist nil
  "Variable to hold details about ledger-mode's environment.
Adding the dotted pair (\"decimal-comma\" . t) will tell ledger
to treat commas as decimal separator.")
   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :config (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))
   #+END_SRC
*** Flycheck for in-buffer formatting and balancing
    Pedantic means all accounts and payees need to be defined before being used
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-ledger
       :init (setq flycheck-ledger-pedantic "check-payees"))
   #+END_SRC
* Remacs
  #+BEGIN_SRC emacs-lisp
    (defun list-unported-remacs-funcs (remacs-dir)
      (unless (file-directory-p remacs-dir)
        (user-error "dir \"%s\" not found" remacs-dir))
      (let* ((default-directory (concat (file-name-as-directory remacs-dir) "src"))
             (defuns (shell-command-to-string "grep -rnIH \"^DEFUN\""))
             (defun-list (split-string defuns "\n" t)))
        (let ((buff (get-buffer-create "*unported functions*"))
              prev-file)
          (switch-to-buffer-other-window buff)
          (delete-region (point-min) (point-max))
          (org-mode)
          (dolist (line defun-list)
            (let ((current-file (car (split-string line ":" t))))
              (unless (string-equal prev-file current-file)
                (setq prev-file current-file)
                (insert "* " prev-file "\n"))
              (insert "  - " (cadr (split-string line "\"")) "\n")
              )))))

    (defun rski/list-unported-emacs-funcs ()
      (interactive)
      (list-unported-remacs-funcs "~/Code/rust/remacs"))
  #+END_SRC
* System
  Emacs is one of the things that i will pretty much *always* start,
  so putting my startup scripts is DE/WM agnostic
** Disable touchpad
   It gets in the way when typing, I use the trackpoint anyway
   #+BEGIN_SRC emacs-lisp
     (let* ((touchpad-id-str (shell-command-to-string "xinput list --id-only  \"SynPS/2 Synaptics TouchPad\""))
            (touchpad-id (string-to-number touchpad-id-str)))
       (unless (eq touchpad-id 0)
         (message "disabling device with id %s, hoping it's the touchpad" touchpad-id)
         (shell-command (format "xinput disable %s" touchpad-id))))
   #+END_SRC
** Set up the keyboard
   My keyboard config gets messed up when I plug in a keyboard (eg dock the laptop)
   It is easier and faster to just call a command in Emacs rather than have to restart
   awesome (IF i'm using awesome) or any other awesome-based solution.
   This makes caps another control and right ctrl change layout
   #+BEGIN_SRC emacs-lisp
     (defun rski/set-up-keyboard()
       (interactive)
       (shell-command "setxkbmap -layout \"gb,el\" -option \"ctrl:nocaps\" -option \"grp:rctrl_toggle\""))

     (rski/set-up-keyboard)
   #+END_SRC

* Hacks
  Load the work in progress stuff that the world is not ready for.
  There is horrible stuff brewing in there
#+BEGIN_SRC emacs-lisp
 (load-file "~/Code/hacks.el")
#+END_SRC
